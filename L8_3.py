# 3)Создайте собственный класс-исключение, который должен проверять содержимое списка на наличие только чисел.
# Проверить работу исключения на реальном примере.
# Необходимо запрашивать у пользователя данные и заполнять список только числами.
# Класс-исключение должен контролировать типы данных элементов списка.
# Примечание: длина списка не фиксирована.
# Элементы запрашиваются бесконечно, пока пользователь сам не остановит работу скрипта, введя, например, команду “stop”.
# При этом скрипт завершается, сформированный список с числами выводится на экран.
# Подсказка: для данного задания примем, что пользователь может вводить только числа и строки.
# При вводе пользователем очередного элемента необходимо реализовать проверку типа элемента и вносить его в список,
# только если введено число.
# Класс-исключение должен не позволить пользователю ввести текст (не число) и отобразить соответствующее сообщение.
# При этом работа скрипта не должна завершаться

class OwnError(Exception):
    def __init__(self):
        self.my_list = []
yes = ['yes', 'Yes', 'y', 'Y', 'да', 'Да']
no = ['no', 'No', 'n', 'N', 'нет', 'Нет']
r_list = []
while True:
    try:
        val = float(input("Введите число: "))
        r_list.append(val)
    except ValueError:
        print("Вы ввели не число")
        a = str(input("Желаете продолжить? (да/нет; yes/no): "))
        if a in yes:
            continue
        elif a in no:
            break
    except OwnError as err:
        print(err)
    else:
        print(f"Все хорошо. Ваш список: {r_list}")
    finally:
        print(f"Ваш список: {r_list}")

